AWSTemplateFormatVersion: 2010-09-09

Metadata:
  VPC:
    Description: 'The actual VPC. Created with 2 subnets and an internet gateway.'
  

Resources:
  #VPC Set up
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: 'us-east-1a'
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: 'us-east-1a'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  #Routes
  PublicSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnet Route Table.
  PrivateSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet Route Table.
  RouteToInternetGateway:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  RouteToNatInstance:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      InstanceId: !Ref NatInstance
      DestinationCidrBlock: 0.0.0.0/0


  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway




  #Instance Configurations
  Bastion:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: rhel-cloud-admin
      InstanceType: t2.micro
      ImageId: ami-b70554c8
      # - RegionToImageId
      # - !Ref 'AWS::Region'
      # - ImageId
      # Use this if no NetworkInterfaces
      # SecurityGroups: []
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref WebAppSecurityGroup
      Tags:
        - Key: Name
          Value: Bastion


  # NEed to change src/dst checks
  NatInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-01623d7b
      SourceDestCheck: false #needs to be false for NAT instance to work.
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref WebAppSecurityGroup
      Tags:
        - Key: Name
          Value: NatInstance
  Server1: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-b70554c8
      KeyName: rhel-cloud-admin
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false
          DeleteOnTermination: true
          SubnetId: !Ref PrivateSubnet
          GroupSet:
            - !Ref WebAppSecurityGroup
      UserData: 
      #Everything after pipe | has \n after it
        Fn::Base64: |
          #!/bin/bash
          yum -y update
          yum -y install httpd
          echo Server1 >> /var/www/html/index.html
          service httpd start
      Tags:
        - Key: Name
          Value: Server1
  Server2: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-b70554c8
      KeyName: rhel-cloud-admin
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: false
          DeleteOnTermination: true
          SubnetId: !Ref PrivateSubnet
          GroupSet:
            - !Ref WebAppSecurityGroup
      UserData: 
      #Everything after pipe | has \n after it
        Fn::Base64: |
          #!/bin/bash
          yum -y update
          yum -y install httpd
          echo Server2 >> /var/www/html/index.html
          service httpd start
      Tags:
        - Key: Name
          Value: Server2

  publicNLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Type: network
      Name: 'load-balancer'
      Scheme: internet-facing
      Subnets: 
        - !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: 'this-loadbalancer'

  NLBListener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref publicNLBTargetGroup
      LoadBalancerArn: !Ref publicNLB
      Port: 80
      Protocol: TCP

  publicNLBTargetGroup:
    # Condition: UseALBCond
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      # HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Name: 'targetsForELB'
      Port: 80
      Protocol: TCP
      Targets:
        - !Ref Server1
        - !Ref Server2
      Tags:
        - Key: Name
          Value: alb-tg        
      VpcId: !Ref VPC





  WebAppSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: SSH and HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC